{"version":3,"file":"index.mjs","sources":["../lib/sumpw.js","../lib/ndarray.js","../lib/dnannsumpw.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport floor from '@stdlib/math-base-special-floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of a double-precision floating-point strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} out - two-element output array whose first element is the accumulated sum and whose second element is the accumulated number of summed values\n* @param {integer} strideOut - stride length for `out`\n* @param {NonNegativeInteger} offsetOut - starting index for `out`\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var out = new Float64Array( [ 0.0, 0 ] );\n*\n* var v = sumpw( 5.0, x, 2, 1, out, 1, 0 );\n* // returns <Float64Array>[ 5.0, 4 ]\n*/\nfunction sumpw( N, x, strideX, offsetX, out, strideOut, offsetOut ) {\n\tvar ix;\n\tvar io;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn out;\n\t}\n\tio = offsetOut;\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\treturn out;\n\t\t}\n\t\tout[ io ] += x[ ix ] * N;\n\t\tout[ io+strideOut ] += N;\n\t\treturn out;\n\t}\n\t// Find the first non-NaN element...\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tbreak;\n\t\t}\n\t\tix += strideX;\n\t}\n\t// If every element was NaN, we are done...\n\tif ( i === N ) {\n\t\treturn out;\n\t}\n\tn = 1;\n\ts = v;\n\tix += strideX;\n\ti += 1;\n\n\t// In order to preserve the sign of zero which can be lost during pairwise summation below, find the first non-zero element...\n\tif ( s === 0.0 ) {\n\t\tfor ( ; i < N; i++ ) {\n\t\t\tv = x[ ix ];\n\t\t\tif ( isnan( v ) === false ) {\n\t\t\t\tif ( v !== 0.0 ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\ts += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t}\n\t}\n\t// If every subsequent element was either NaN or zero, we are done...\n\tif ( i === N ) {\n\t\tout[ io ] += s;\n\t\tout[ io+strideOut ] += n;\n\t\treturn out;\n\t}\n\t// If we are here, then we found a non-zero element and we no longer have to be concerned about preserving zero's sign...\n\n\tif ( (N-i) < 8 ) {\n\t\t// Use simple summation...\n\t\tfor ( ; i < N; i++ ) {\n\t\t\tv = x[ ix ];\n\t\t\tif ( isnan( v ) === false ) {\n\t\t\t\ts += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t}\n\t\tout[ io ] += s;\n\t\tout[ io+strideOut ] += n;\n\t\treturn out;\n\t}\n\tif ( (N-i) <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = -0.0; // note: negative zero in order to ensure sign preservation if all elements are negative zero\n\t\ts1 = -0.0;\n\t\ts2 = -0.0;\n\t\ts3 = -0.0;\n\t\ts4 = -0.0;\n\t\ts5 = -0.0;\n\t\ts6 = -0.0;\n\t\ts7 = -0.0;\n\n\t\tM = (N-i) % 8;\n\t\tfor ( ; i < N-M; i += 8 ) {\n\t\t\tv = x[ ix ];\n\t\t\tif ( isnan( v ) === false ) {\n\t\t\t\ts0 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t\tv = x[ ix ];\n\t\t\tif ( isnan( v ) === false ) {\n\t\t\t\ts1 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t\tv = x[ ix ];\n\t\t\tif ( isnan( v ) === false ) {\n\t\t\t\ts2 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t\tv = x[ ix ];\n\t\t\tif ( isnan( v ) === false ) {\n\t\t\t\ts3 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t\tv = x[ ix ];\n\t\t\tif ( isnan( v ) === false ) {\n\t\t\t\ts4 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t\tv = x[ ix ];\n\t\t\tif ( isnan( v ) === false ) {\n\t\t\t\ts5 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t\tv = x[ ix ];\n\t\t\tif ( isnan( v ) === false ) {\n\t\t\t\ts6 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t\tv = x[ ix ];\n\t\t\tif ( isnan( v ) === false ) {\n\t\t\t\ts7 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts += ( (s0+s1) + (s2+s3) ) + ( (s4+s5) + (s6+s7) );\n\n\t\t// Clean-up loop...\n\t\tfor ( ; i < N; i++ ) {\n\t\t\tv = x[ ix ];\n\t\t\tif ( isnan( v ) === false ) {\n\t\t\t\ts += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t}\n\t\tout[ io ] += s;\n\t\tout[ io+strideOut ] += n;\n\t\treturn out;\n\t}\n\tout[ io ] += s;\n\tout[ io+strideOut ] += n;\n\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( (N-i)/2 );\n\tn -= n % 8;\n\tsumpw( n, x, strideX, ix, out, strideOut, io );\n\tsumpw( N-i-n, x, strideX, ix+(n*strideX), out, strideOut, io );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default sumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sumpw from './sumpw.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - stride length for `out`\n* @param {NonNegativeInteger} offsetOut - starting index for `out`\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dnannsumpw( 5, x, 2, 1, out, 1, 0 );\n* // returns <Float64Array>[ 5.0, 4 ]\n*/\nfunction dnannsumpw( N, x, strideX, offsetX, out, strideOut, offsetOut ) {\n\tvar io = offsetOut;\n\n\t// Initialize output values:\n\tout[ io ] = -0.0; // note: initialize to negative zero to allow preservation of negative zero for the edge case of an input array containing only negative zeros\n\tout[ io+strideOut ] = 0;\n\n\t// Perform pairwise summation:\n\tsumpw( N, x, strideX, offsetX, out, strideOut, io );\n\n\t// If all elements were `NaN`, the default sum is positive zero...\n\tif ( out[ io+strideOut ] === 0 ) {\n\t\tout[ io ] = 0.0;\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default dnannsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - stride length for `out`\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dnannsumpw( x.length, x, 1, out, 1 );\n* // returns <Float64Array>[ 1.0, 3 ]\n*/\nfunction dnannsumpw( N, x, strideX, out, strideOut ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ), out, strideOut, stride2offset( 2, strideOut ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dnannsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport dnannsumpw from './dnannsumpw.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dnannsumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dnannsumpw;\n"],"names":["BLOCKSIZE","sumpw","N","x","strideX","offsetX","out","strideOut","offsetOut","ix","io","s0","s1","s2","s3","s4","s5","s6","s7","M","s","n","v","i","isnan","floor","dnannsumpw","ndarray","stride2offset","setReadOnly"],"mappings":"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"}